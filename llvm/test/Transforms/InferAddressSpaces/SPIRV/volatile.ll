; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=spirv32-- -passes=infer-address-spaces %s | FileCheck %s
; RUN: opt -S -mtriple=spirv64-- -passes=infer-address-spaces %s | FileCheck %s

; Check that volatile users of addrspacecast are not replaced.

define spir_kernel void @volatile_load_flat_from_global(ptr addrspace(1) nocapture %input, ptr addrspace(1) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_load_flat_from_global(
; CHECK-SAME: ptr addrspace(1) nocapture [[INPUT:%.*]], ptr addrspace(1) nocapture [[OUTPUT:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(1) [[INPUT]] to ptr addrspace(4)
; CHECK-NEXT:    [[VAL:%.*]] = load volatile i32, ptr addrspace(4) [[TMP0]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr addrspace(1) [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(1) %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr addrspace(1) %output to ptr addrspace(4)
  %val = load volatile i32, ptr addrspace(4) %tmp0, align 4
  store i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @volatile_load_flat_from_constant(ptr addrspace(2) nocapture %input, ptr addrspace(1) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_load_flat_from_constant(
; CHECK-SAME: ptr addrspace(2) nocapture [[INPUT:%.*]], ptr addrspace(1) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(2) [[INPUT]] to ptr addrspace(4)
; CHECK-NEXT:    [[VAL:%.*]] = load volatile i32, ptr addrspace(4) [[TMP0]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr addrspace(1) [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(2) %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr addrspace(1) %output to ptr addrspace(4)
  %val = load volatile i32, ptr addrspace(4) %tmp0, align 4
  store i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @volatile_load_flat_from_group(ptr addrspace(3) nocapture %input, ptr addrspace(3) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_load_flat_from_group(
; CHECK-SAME: ptr addrspace(3) nocapture [[INPUT:%.*]], ptr addrspace(3) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr addrspace(3) [[INPUT]] to ptr addrspace(4)
; CHECK-NEXT:    [[VAL:%.*]] = load volatile i32, ptr addrspace(4) [[TMP0]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr addrspace(3) [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(3) %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr addrspace(3) %output to ptr addrspace(4)
  %val = load volatile i32, ptr addrspace(4) %tmp0, align 4
  store i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @volatile_load_flat_from_private(ptr nocapture %input, ptr nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_load_flat_from_private(
; CHECK-SAME: ptr nocapture [[INPUT:%.*]], ptr nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP0:%.*]] = addrspacecast ptr [[INPUT]] to ptr addrspace(4)
; CHECK-NEXT:    [[VAL:%.*]] = load volatile i32, ptr addrspace(4) [[TMP0]], align 4
; CHECK-NEXT:    store i32 [[VAL]], ptr [[OUTPUT]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr %output to ptr addrspace(4)
  %val = load volatile i32, ptr addrspace(4) %tmp0, align 4
  store i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @volatile_store_flat_to_global(ptr addrspace(1) nocapture %input, ptr addrspace(1) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_store_flat_to_global(
; CHECK-SAME: ptr addrspace(1) nocapture [[INPUT:%.*]], ptr addrspace(1) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(1) [[OUTPUT]] to ptr addrspace(4)
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr addrspace(1) [[INPUT]], align 4
; CHECK-NEXT:    store volatile i32 [[VAL]], ptr addrspace(4) [[TMP1]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(1) %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr addrspace(1) %output to ptr addrspace(4)
  %val = load i32, ptr addrspace(4) %tmp0, align 4
  store volatile i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @volatile_store_flat_to_group(ptr addrspace(3) nocapture %input, ptr addrspace(3) nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_store_flat_to_group(
; CHECK-SAME: ptr addrspace(3) nocapture [[INPUT:%.*]], ptr addrspace(3) nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(3) [[OUTPUT]] to ptr addrspace(4)
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr addrspace(3) [[INPUT]], align 4
; CHECK-NEXT:    store volatile i32 [[VAL]], ptr addrspace(4) [[TMP1]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr addrspace(3) %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr addrspace(3) %output to ptr addrspace(4)
  %val = load i32, ptr addrspace(4) %tmp0, align 4
  store volatile i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define spir_kernel void @volatile_store_flat_to_private(ptr nocapture %input, ptr nocapture %output) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_store_flat_to_private(
; CHECK-SAME: ptr nocapture [[INPUT:%.*]], ptr nocapture [[OUTPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr [[OUTPUT]] to ptr addrspace(4)
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr [[INPUT]], align 4
; CHECK-NEXT:    store volatile i32 [[VAL]], ptr addrspace(4) [[TMP1]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = addrspacecast ptr %input to ptr addrspace(4)
  %tmp1 = addrspacecast ptr %output to ptr addrspace(4)
  %val = load i32, ptr addrspace(4) %tmp0, align 4
  store volatile i32 %val, ptr addrspace(4) %tmp1, align 4
  ret void
}

define i32 @volatile_atomicrmw_add_group_to_flat(ptr addrspace(3) %group.ptr, i32 %y) #0 {
; CHECK-LABEL: define i32 @volatile_atomicrmw_add_group_to_flat(
; CHECK-SAME: ptr addrspace(3) [[GROUP_PTR:%.*]], i32 [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(3) [[GROUP_PTR]] to ptr addrspace(4)
; CHECK-NEXT:    [[RET:%.*]] = atomicrmw volatile add ptr addrspace(4) [[CAST]], i32 [[Y]] seq_cst, align 4
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cast = addrspacecast ptr addrspace(3) %group.ptr to ptr addrspace(4)
  %ret = atomicrmw volatile add ptr addrspace(4) %cast, i32 %y seq_cst
  ret i32 %ret
}

define i32 @volatile_atomicrmw_add_global_to_flat(ptr addrspace(1) %global.ptr, i32 %y) #0 {
; CHECK-LABEL: define i32 @volatile_atomicrmw_add_global_to_flat(
; CHECK-SAME: ptr addrspace(1) [[GLOBAL_PTR:%.*]], i32 [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(1) [[GLOBAL_PTR]] to ptr addrspace(4)
; CHECK-NEXT:    [[RET:%.*]] = atomicrmw volatile add ptr addrspace(4) [[CAST]], i32 [[Y]] seq_cst, align 4
; CHECK-NEXT:    ret i32 [[RET]]
;
  %cast = addrspacecast ptr addrspace(1) %global.ptr to ptr addrspace(4)
  %ret = atomicrmw volatile add ptr addrspace(4) %cast, i32 %y seq_cst
  ret i32 %ret
}

define { i32, i1 } @volatile_cmpxchg_global_to_flat(ptr addrspace(1) %global.ptr, i32 %cmp, i32 %val) #0 {
; CHECK-LABEL: define { i32, i1 } @volatile_cmpxchg_global_to_flat(
; CHECK-SAME: ptr addrspace(1) [[GLOBAL_PTR:%.*]], i32 [[CMP:%.*]], i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(1) [[GLOBAL_PTR]] to ptr addrspace(4)
; CHECK-NEXT:    [[RET:%.*]] = cmpxchg volatile ptr addrspace(4) [[CAST]], i32 [[CMP]], i32 [[VAL]] seq_cst monotonic, align 4
; CHECK-NEXT:    ret { i32, i1 } [[RET]]
;
  %cast = addrspacecast ptr addrspace(1) %global.ptr to ptr addrspace(4)
  %ret = cmpxchg volatile ptr addrspace(4) %cast, i32 %cmp, i32 %val seq_cst monotonic
  ret { i32, i1 } %ret
}

define { i32, i1 } @volatile_cmpxchg_group_to_flat(ptr addrspace(3) %group.ptr, i32 %cmp, i32 %val) #0 {
; CHECK-LABEL: define { i32, i1 } @volatile_cmpxchg_group_to_flat(
; CHECK-SAME: ptr addrspace(3) [[GROUP_PTR:%.*]], i32 [[CMP:%.*]], i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(3) [[GROUP_PTR]] to ptr addrspace(4)
; CHECK-NEXT:    [[RET:%.*]] = cmpxchg volatile ptr addrspace(4) [[CAST]], i32 [[CMP]], i32 [[VAL]] seq_cst monotonic, align 4
; CHECK-NEXT:    ret { i32, i1 } [[RET]]
;
  %cast = addrspacecast ptr addrspace(3) %group.ptr to ptr addrspace(4)
  %ret = cmpxchg volatile ptr addrspace(4) %cast, i32 %cmp, i32 %val seq_cst monotonic
  ret { i32, i1 } %ret
}

define spir_kernel void @volatile_memset_group_to_flat(ptr addrspace(3) %group.ptr, i32 %y) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_memset_group_to_flat(
; CHECK-SAME: ptr addrspace(3) [[GROUP_PTR:%.*]], i32 [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(3) [[GROUP_PTR]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.memset.p4.i64(ptr addrspace(4) align 4 [[CAST]], i8 4, i64 32, i1 true)
; CHECK-NEXT:    ret void
;
  %cast = addrspacecast ptr addrspace(3) %group.ptr to ptr addrspace(4)
  call void @llvm.memset.p0.i64(ptr addrspace(4) align 4 %cast, i8 4, i64 32, i1 true)
  ret void
}

define spir_kernel void @volatile_memset_global_to_flat(ptr addrspace(1) %global.ptr, i32 %y) #0 {
; CHECK-LABEL: define spir_kernel void @volatile_memset_global_to_flat(
; CHECK-SAME: ptr addrspace(1) [[GLOBAL_PTR:%.*]], i32 [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CAST:%.*]] = addrspacecast ptr addrspace(1) [[GLOBAL_PTR]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.memset.p4.i64(ptr addrspace(4) align 4 [[CAST]], i8 4, i64 32, i1 true)
; CHECK-NEXT:    ret void
;
  %cast = addrspacecast ptr addrspace(1) %global.ptr to ptr addrspace(4)
  call void @llvm.memset.p4.i64(ptr addrspace(4) align 4 %cast, i8 4, i64 32, i1 true)
  ret void
}

declare void @llvm.memset.p4.i64(ptr addrspace(4) nocapture writeonly, i8, i64, i1) #1

attributes #0 = { nounwind }
attributes #1 = { argmemonly nounwind }
