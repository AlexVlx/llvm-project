; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=spirv32-- -passes=infer-address-spaces %s | FileCheck %s
; RUN: opt -S -mtriple=spirv64-- -passes=infer-address-spaces %s | FileCheck %s

; Test that pure addrspacecast instructions not directly connected to
; a memory operation are inferred.

define void @addrspacecast_gep_addrspacecast(ptr addrspace(3) %ptr) {
; CHECK-LABEL: define void @addrspacecast_gep_addrspacecast(
; CHECK-SAME: ptr addrspace(3) [[PTR:%.*]]) {
; CHECK-NEXT:    [[GEP0:%.*]] = getelementptr i32, ptr addrspace(3) [[PTR]], i64 9
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[GEP0]], align 8
; CHECK-NEXT:    ret void
;
  %asc0 = addrspacecast ptr addrspace(3) %ptr to ptr addrspace(4)
  %gep0 = getelementptr i32, ptr addrspace(4) %asc0, i64 9
  %asc1 = addrspacecast ptr addrspace(4) %gep0 to ptr addrspace(3)
  store i32 8, ptr addrspace(3) %asc1, align 8
  ret void
}

define void @addrspacecast_different_pointee_type(ptr addrspace(3) %ptr) {
; CHECK-LABEL: define void @addrspacecast_different_pointee_type(
; CHECK-SAME: ptr addrspace(3) [[PTR:%.*]]) {
; CHECK-NEXT:    [[GEP0:%.*]] = getelementptr i32, ptr addrspace(3) [[PTR]], i64 9
; CHECK-NEXT:    store i8 8, ptr addrspace(3) [[GEP0]], align 8
; CHECK-NEXT:    ret void
;
  %asc0 = addrspacecast ptr addrspace(3) %ptr to ptr addrspace(4)
  %gep0 = getelementptr i32, ptr addrspace(4) %asc0, i64 9
  %asc1 = addrspacecast ptr addrspace(4) %gep0 to ptr addrspace(3)
  store i8 8, ptr addrspace(3) %asc1, align 8
  ret void
}

define void @addrspacecast_to_memory(ptr addrspace(3) %ptr) {
; CHECK-LABEL: define void @addrspacecast_to_memory(
; CHECK-SAME: ptr addrspace(3) [[PTR:%.*]]) {
; CHECK-NEXT:    [[GEP0:%.*]] = getelementptr i32, ptr addrspace(3) [[PTR]], i64 9
; CHECK-NEXT:    store volatile ptr addrspace(3) [[GEP0]], ptr addrspace(1) undef, align
; CHECK-NEXT:    ret void
;
  %asc0 = addrspacecast ptr addrspace(3) %ptr to ptr addrspace(4)
  %gep0 = getelementptr i32, ptr addrspace(4) %asc0, i64 9
  %asc1 = addrspacecast ptr addrspace(4) %gep0 to ptr addrspace(3)
  store volatile ptr addrspace(3) %asc1, ptr addrspace(1) undef
  ret void
}

define void @multiuse_addrspacecast_gep_addrspacecast(ptr addrspace(3) %ptr) {
; CHECK-LABEL: define void @multiuse_addrspacecast_gep_addrspacecast(
; CHECK-SAME: ptr addrspace(3) [[PTR:%.*]]) {
; CHECK-NEXT:    [[ASC0:%.*]] = addrspacecast ptr addrspace(3) [[PTR]] to ptr addrspace(4)
; CHECK-NEXT:    store volatile ptr addrspace(4) [[ASC0]], ptr addrspace(1) undef, align
; CHECK-NEXT:    [[GEP0:%.*]] = getelementptr i32, ptr addrspace(3) [[PTR]], i64 9
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[GEP0]], align 8
; CHECK-NEXT:    ret void
;
  %asc0 = addrspacecast ptr addrspace(3) %ptr to ptr addrspace(4)
  store volatile ptr addrspace(4) %asc0, ptr addrspace(1) undef
  %gep0 = getelementptr i32, ptr addrspace(4) %asc0, i64 9
  %asc1 = addrspacecast ptr addrspace(4) %gep0 to ptr addrspace(3)
  store i32 8, ptr addrspace(3) %asc1, align 8
  ret void
}
