; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=dse < %s | FileCheck %s

%struct.type = type { ptr addrspace(4), ptr addrspace(4) }

define ptr @malloc_to_calloc() {
; CHECK-LABEL: define ptr @malloc_to_calloc() {
; CHECK-NEXT:    [[STRUCT_ALLOCA:%.*]] = alloca [[STRUCT_TYPE:%.*]], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 56, ptr nonnull [[STRUCT_ALLOCA]]) #[[ATTR6:[0-9]+]]
; CHECK-NEXT:    [[STRUCT_BYTE_8:%.*]] = getelementptr inbounds i8, ptr [[STRUCT_ALLOCA]], i64 8
; CHECK-NEXT:    [[STRUCT_BYTE_4:%.*]] = getelementptr inbounds i8, ptr [[STRUCT_ALLOCA]], i64 4
; CHECK-NEXT:    [[CALLOC1:%.*]] = call ptr addrspace(4) @calloc(i64 1, i64 4)
; CHECK-NEXT:    [[CALLOC:%.*]] = call ptr addrspace(4) @calloc(i64 1, i64 4)
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr [[STRUCT_BYTE_8]], i64 4
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 [[TMP1]], i8 42, i64 4, i1 false)
; CHECK-NEXT:    store i32 43, ptr [[STRUCT_BYTE_8]], align 4
; CHECK-NEXT:    [[RET:%.*]] = load ptr, ptr [[STRUCT_BYTE_8]], align 8
; CHECK-NEXT:    call void @readnone(ptr [[STRUCT_BYTE_4]])
; CHECK-NEXT:    call void @readnone(ptr [[STRUCT_BYTE_8]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 56, ptr nonnull [[STRUCT_ALLOCA]]) #[[ATTR6]]
; CHECK-NEXT:    call void @use(ptr addrspace(4) [[CALLOC1]])
; CHECK-NEXT:    call void @use(ptr addrspace(4) [[CALLOC]])
; CHECK-NEXT:    ret ptr [[RET]]
;
  %struct.alloca = alloca %struct.type, align 8
  call void @llvm.lifetime.start.p4(i64 56, ptr nonnull %struct.alloca) nounwind
  %struct.byte.8 = getelementptr inbounds i8, ptr %struct.alloca, i64 8
  %struct.byte.4 = getelementptr inbounds i8, ptr %struct.alloca, i64 4

  ; Set of removable memory deffs
  %m1 = tail call ptr addrspace(4) @malloc(i64 4)
  %m2 = tail call ptr addrspace(4) @malloc(i64 4)
  store i32 0, ptr %struct.byte.4
  store i32 0, ptr %struct.byte.8
  call void @llvm.memset.p4.i64(ptr addrspace(4) noundef nonnull align 4 %m2, i8 0, i64 4, i1 false)
  call void @llvm.memset.p4.i64(ptr addrspace(4) noundef nonnull align 4 %m1, i8 0, i64 4, i1 false)

  ; Set %struct.alloca[8, 16) to 42.
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 %struct.byte.8, i8 42, i64 8, i1 false)
  ; Set %struct.alloca[8, 12) to 43.
  store i32 43, ptr %struct.byte.8, align 4
  ; Set %struct.alloca[4, 8) to 44.
  store i32 44, ptr %struct.byte.4, align 4
  ; Return %struct.alloca[8, 16).
  %ret = load ptr, ptr %struct.byte.8
  call void @readnone(ptr %struct.byte.4);
  call void @readnone(ptr %struct.byte.8);
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %struct.alloca) nounwind
  call void @use(ptr addrspace(4) %m1)
  call void @use(ptr addrspace(4) %m2)
  ret ptr %ret
}

declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg)
declare void @llvm.memset.p4.i64(ptr addrspace(4) nocapture writeonly, i8, i64, i1 immarg)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)

declare noalias ptr addrspace(4) @malloc(i64) willreturn allockind("alloc,uninitialized") "alloc-family"="malloc"
declare void @readnone(ptr) readnone nounwind
declare void @free(ptr addrspace(4) nocapture) allockind("free") "alloc-family"="malloc"

declare void @use(ptr addrspace(4))
